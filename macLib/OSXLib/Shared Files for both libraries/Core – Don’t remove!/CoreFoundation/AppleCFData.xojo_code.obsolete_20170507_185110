#tag Class
Protected Class AppleCFData
Inherits AppleCFObject
	#tag Method, Flags = &h0, Description = 52657475726E7320612062756666657220776974682076616C7565732066726F6D20616E2061727261792E
		Function Bytes(range as corefoundationframework.cfrange) As Xojo.Core.MemoryBlock
		  dim result as new Xojo.Core.MutableMemoryBlock(range.Length)
		  CFDataGetBytes(mcftyperef, range, result.data)
		  return result
		End Function
	#tag EndMethod

	#tag ExternalMethod, Flags = &h1
		Protected Declare Function CFDataCreate Lib CoreFoundationLibName (allocator as ptr, data as ptr, numvalues as int32) As Ptr
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h1
		Protected Declare Function CFDataCreateCopy Lib CoreFoundationLibName (allocator as ptr, id as ptr) As Ptr
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h1
		Protected Declare Function CFDataFind Lib CoreFoundationLibName (id as ptr, data as ptr, Range as corefoundationframework . CFRAnge, options as uinteger) As corefoundationframework.cfrange
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h1
		Protected Declare Function CFDataGetBytePtr Lib CoreFoundationLibName (id as ptr) As Ptr
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h1
		Protected Declare Sub CFDataGetBytes Lib CoreFoundationLibName (id as ptr, range as corefoundationframework . cfrange, data as ptr)
	#tag EndExternalMethod

	#tag ExternalMethod, Flags = &h1
		Protected Declare Function CFDataGetLength Lib CoreFoundationLibName (id as ptr) As Int32
	#tag EndExternalMethod

	#tag Method, Flags = &h0, Description = 4372656174657320616E20696D6D757461626C6520434644617461206F626A656374207573696E67206461746120636F706965642066726F6D2061207370656369666965642062797465206275666665722E
		Sub Constructor(data as Xojo.Core.MemoryBlock, count as int32 = 0)
		  // Calling the overridden superclass constructor.
		  if count = 0 then count = data.Size
		  Super.Constructor(CFDataCreate(nil, data.data, count), true, true)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0, Description = 4372656174657320616E20696D6D757461626C6520636F7079206F662074686520434644617461206F626A6563742E
		Function Copy() As applecfdata
		  return AppleCFData.MakefromCFTypeRef(CFDataCreateCopy (nil, mcftyperef), true, true)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0, Description = 412073686F727463757420666F722066696E64696E67206461746120696E207468652077686F6C652064617461206F626A656374
		Function Find(FindData as AppleCFData) As corefoundationframework.cfrange
		  Dim options As New CFDataSearchFlags(0)
		  dim range as corefoundationframework.cfRange = CoreFoundationFramework.CFMakeRange(0, length)
		  return find(FindData, range, options)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0, Description = 46696E647320616E642072657475726E73207468652072616E67652077697468696E20612064617461206F626A656374206F6620746865206669727374206F6363757272656E6365206F662074686520676976656E20646174612C2077697468696E206120676976656E2072616E67652C207375626A65637420746F20616E7920676976656E206F7074696F6E732E
		Function Find(FindData as AppleCFData, Range as corefoundationframework.cfrange, Options As CFDataSearchFlags) As corefoundationframework.cfrange
		  return CFDataFind(mcftyperef, FindData.CFTypeRef, range, options.id)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Shared Function MakefromCFTypeRef(aCFTypeRef as ptr, dontretain as boolean = false, takeownership as Boolean = false) As AppleCFData
		  return if (aCFTypeRef = nil, nil, new AppleCFdata(aCFTypeRef, dontretain, takeownership))
		End Function
	#tag EndMethod


	#tag Note, Name = Status incomplete
		
		createâ€¦nocopy missing (no CFAllocator yet)
	#tag EndNote


	#tag ComputedProperty, Flags = &h0, Description = 5468652077686F6C65206461746120636F6E7461696E656420696E207468652064617461206F626A6563742028726561642D6F6E6C79292E
		#tag Getter
			Get
			  return Bytes(CoreFoundationFramework.CFMakeRange(0, Length))
			End Get
		#tag EndGetter
		Data As Xojo.Core.MemoryBlock
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0, Description = 4120706F696E74657220746F20746865206279746573206F662074686520434644617461206F626A6563742E2028726561642D6F6E6C7929
		#tag Getter
			Get
			  return CFDataGetBytePtr(mcftypeRef)
			End Get
		#tag EndGetter
		DataPtr As Ptr
	#tag EndComputedProperty

	#tag ComputedProperty, Flags = &h0, Description = 546865206E756D626572206F6620627974657320636F6E7461696E65642062792074686520434644617461206F626A6563742E2028726561642D6F6E6C7929
		#tag Getter
			Get
			  return CFDataGetLength(mcftypeRef)
			End Get
		#tag EndGetter
		Length As Int32
	#tag EndComputedProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="CFTypeDescription"
			Group="Behavior"
			Type="Text"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Description"
			Group="Behavior"
			Type="Text"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Hash"
			Group="Behavior"
			Type="UInteger"
		#tag EndViewProperty
		#tag ViewProperty
			Name="HasOwnership"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="isNIL"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="mHasOwnership"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="RetainCount"
			Group="Behavior"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="TypeID"
			Group="Behavior"
			Type="UInteger"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
