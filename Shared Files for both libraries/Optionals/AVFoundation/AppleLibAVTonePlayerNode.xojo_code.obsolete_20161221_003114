#tag Class
Protected Class AppleLibAVTonePlayerNode
Inherits AppleAVAudioPlayerNode
	#tag Method, Flags = &h21
		Private Sub CompletionBlock()
		  #pragma BackgroundTasks false
		  #pragma NilObjectChecking false
		  #Pragma StackOverflowChecking false
		  
		  static Selector as ptr
		  if Selector = nil then Selector= FoundationFrameWork.NSSelectorFromString("preparationFinished")
		  
		  FoundationFrameWork.PerformSelectorOnMainThread (mid, Selector, nil, false)
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Constructor()
		  // Calling the overridden superclass constructor.
		  // Note that this may need modifications if there are multiple constructor choices.
		  // Possible constructor calls:
		  // Constructor() -- From AppleAVAudioPlayerNode
		  // Constructor() -- From AppleObject
		  // Constructor(aPtr as Ptr) -- From AppleObject
		  // Constructor(aPtr as Ptr, takeOwnership as Boolean, Retain as Boolean = false) -- From AppleObject
		  Super.Constructor(init(alloc(Classptr)), true)
		  registeridentity (self)
		  AudioFormat = new AppleAVAudioFormat(SampleRate, 1)
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h1
		Protected Sub DEstructor()
		  if HasOwnership then unregisterIdentity(self)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Sub FillBuffer(Buffer As AppleAVAudioPCMBuffer)
		  dim frames as uint32 = buffer.FrameCapacity
		  dim bufptr as ptr = Buffer.FloatChannelData.Ptr(0)
		  dim data as new xojo.Core.MutableMemoryBlock (Bufptr, frames * 4)
		  dim bufTheta as single = self.Theta
		  Static limit as double
		  if limit = 0 then limit = 2 * DoubleExtension.pi
		  dim thetaIncrement as double = 2.0 * DoubleExtension.Pi * self.Frequency / self.SampleRate
		  dim stepdata as new xojo.Core.MutableMemoryBlock (frames * 4)
		  dim multdata as new xojo.Core.MutableMemoryBlock (frames * 4)
		  for frame as uint32 = 0 to frames-1
		    stepdata.SingleValue(frame * 4) =  bufTheta
		    bufTheta = bufTheta + thetaIncrement
		    if bufTheta > limit then bufTheta = bufTheta - limit
		  next
		  'bufTheta = Theta
		  AccelerateFramework.SinusSingle multdata, stepdata, frames
		  AccelerateFramework.Vector_Multiply multdata, data, Amplitude
		  'for frame as uint32 = 0 to frames-1
		  'data.SingleValue(frame * 4) = sin(bufTheta) * Amplitude
		  'bufTheta = bufTheta + thetaIncrement
		  'if bufTheta > limit then 
		  'bufTheta = bufTheta - limit
		  'end if
		  'next
		  Buffer.FrameLength = frames
		  theta = bufTheta
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Function Identity(id as ptr) As AppleLibAVTonePlayerNode
		  dim wr as xojo.Core.WeakRef = XojoIdentity.Lookup(id, Nil)
		  if wr <> nil then return AppleLibAVTonePlayerNode(wr.Value)
		End Function
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Sub impl_preparationFinished(pid as ptr, sel as ptr)
		  dim ego as AppleLibAVTonePlayerNode = InformInstance(pid)
		  if ego <> nil then 
		    if ego.Playing then ego.ScheduleBuffer
		  end if
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Shared Function InformInstance(id as ptr) As AppleLibAVTonePlayerNode
		  dim ident as AppleLibAVTonePlayerNode = Identity(id)
		  return if (ident = nil, nil, ident)
		  
		  // return if (ident = nil, AppleResponder.MakeFromPtr (id), ident)
		  
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub PlayMelody(Data() as double)
		  self.MelodyData = data
		  Playposition = 0
		  StoponNextNote = false
		  playnext
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Playnext()
		  if Playposition * 3 >= MelodyData.Ubound  then 
		    Playposition = 0
		    MelodyRepeatCount = MelodyRepeatCount + 1
		    Theta = 0
		    if MelodyRepeatCount >= MelodyRepeat then
		      MelodyRepeatCount = 0
		      self.Sound (MelodyData (Playposition* 3), MelodyData (Playposition* 3 +1), _
		      MelodyData (Playposition* 3 +2))
		      Playposition = Playposition + 1
		      StoponNextNote = true
		      return
		    end if
		  end if
		  if StoponNextNote then
		    Stop
		    RaiseEvent MelodyFinished
		  else
		    self.Sound (MelodyData (Playposition* 3), MelodyData (Playposition* 3 +1), _
		    MelodyData (Playposition* 3 +2))
		    Playposition = Playposition + 1
		  end if
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h21
		Private Function PrepareBuffer() As AppleAVAudioPCMBuffer
		  if self <> nil then
		    if AudioFormat = nil then break
		    dim buffer as new AppleAVAudioPCMBuffer(AudioFormat, BufferCapacity)
		    FillBuffer(Buffer)
		    Return buffer
		  end if
		End Function
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub PreparePlay()
		  scheduleBuffer
		  ScheduleBuffer
		  scheduleBuffer
		  ScheduleBuffer
		  
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0, Description = 5265676973746572732074686520636F6E74726F6C20697473656C662061732061205765616B52656620696E2061207368617265642044696374696F6E6172792E
		Attributes( hidden )  Sub RegisterIdentity(Identity As object)
		  XojoIdentity.Value (id) = xojo.core.WeakRef.Create(Identity)
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub ScheduleBuffer()
		  Dim buffer as AppleAVAudioPCMBuffer = prepareBuffer
		  static completion as appleblock
		  if completion = nil then completion = new appleblock (AddressOf CompletionBlock)
		  self.SchedulePlayback(buffer, completion)
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0
		Sub Sound(Frequency As Double, Milliseconds As Double, Volume As Double = 0.25)
		  self.Frequency = Frequency
		  self.Amplitude = Volume
		  if volume = 0 then Theta = 0
		  PreparePlay
		  ScheduleBuffer
		  play
		  xojo.core.timer.CallLater Milliseconds, Addressof playnext
		  
		End Sub
	#tag EndMethod

	#tag Method, Flags = &h0, Description = 5265676973746572732074686520636F6E74726F6C20697473656C662061732061205765616B52656620696E2061207368617265642044696374696F6E6172792E
		Attributes( hidden )  Sub UnregisterIdentity(Identity As object)
		  if XojoIdentity.HasKey(id) then XojoIdentity.Remove(id)
		End Sub
	#tag EndMethod


	#tag Hook, Flags = &h0, Description = 4669726573207768656E206120546F6E6520706C6179656420776974682074686520536F756E64206D6574686F642066696E69736865732E
		Event MelodyFinished()
	#tag EndHook


	#tag Property, Flags = &h0
		Amplitude As Double = 0.25
	#tag EndProperty

	#tag Property, Flags = &h0
		AudioFormat As AppleAVAudioFormat
	#tag EndProperty

	#tag Property, Flags = &h0
		BufferCapacity As UInt32 = 512
	#tag EndProperty

	#tag ComputedProperty, Flags = &h0
		#tag Getter
			Get
			  static mclassptr as ptr
			  if mclassptr = nil then
			    dim methods() as TargetClassMethodHelper
			    Methods.Append new TargetClassMethodHelper("preparationFinished", Addressof impl_preparationFinished, "v@:")
			    mclassptr = BuildTargetClass ("AVAudioPlayerNode", "AppleLibAVTonePlayerNode", methods)
			  end if
			  return mclassptr
			  
			End Get
		#tag EndGetter
		Shared Classptr As Ptr
	#tag EndComputedProperty

	#tag Property, Flags = &h0
		Frequency As Double = 440.0
	#tag EndProperty

	#tag Property, Flags = &h0
		MelodyData() As double
	#tag EndProperty

	#tag Property, Flags = &h0
		MelodyRepeat As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private MelodyRepeatCount As Integer
	#tag EndProperty

	#tag Property, Flags = &h21
		Private Playposition As Integer
	#tag EndProperty

	#tag Property, Flags = &h0
		SampleRate As Double = 44100.0
	#tag EndProperty

	#tag Property, Flags = &h0
		StoponNextNote As Boolean
	#tag EndProperty

	#tag Property, Flags = &h21
		Private Theta As Double = 0
	#tag EndProperty

	#tag ComputedProperty, Flags = &h1
		#tag Getter
			Get
			  static midentity as xojo.Core.Dictionary
			  if midentity = nil then midentity = new xojo.Core.Dictionary
			  return midentity
			End Get
		#tag EndGetter
		Protected Shared XojoIdentity As xojo.Core.Dictionary
	#tag EndComputedProperty


	#tag ViewBehavior
		#tag ViewProperty
			Name="Amplitude"
			Group="Behavior"
			InitialValue="0.25"
			Type="Double"
		#tag EndViewProperty
		#tag ViewProperty
			Name="BufferCapacity"
			Group="Behavior"
			InitialValue="512"
			Type="UInt32"
		#tag EndViewProperty
		#tag ViewProperty
			Name="DebugDescription"
			Group="Behavior"
			Type="Text"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Frequency"
			Group="Behavior"
			InitialValue="440.0"
			Type="Double"
		#tag EndViewProperty
		#tag ViewProperty
			Name="HasOwnership"
			Group="Behavior"
			Type="boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Index"
			Visible=true
			Group="ID"
			InitialValue="-2147483648"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Left"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
		#tag ViewProperty
			Name="mHasOwnership"
			Group="Behavior"
			Type="boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Name"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="NextAvailableInputBus"
			Group="Behavior"
			Type="UInteger"
		#tag EndViewProperty
		#tag ViewProperty
			Name="NumberOfInputs"
			Group="Behavior"
			Type="UInteger"
		#tag EndViewProperty
		#tag ViewProperty
			Name="NumberOfOutputs"
			Group="Behavior"
			Type="UInteger"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Obstruction"
			Group="Behavior"
			Type="Single"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Occlusion"
			Group="Behavior"
			Type="Single"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Pan"
			Group="Behavior"
			Type="Single"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Playing"
			Group="Behavior"
			Type="Boolean"
		#tag EndViewProperty
		#tag ViewProperty
			Name="RenderingAlgorithms"
			Group="Behavior"
			Type="AVAudio3DMixingRenderingAlgorithm"
			EditorType="Enum"
			#tag EnumValues
				"0 - EqualPowerPanning"
				"1 - SphericalHead"
				"2 - HRTF"
				"3 - SoundField"
				"5 - StereoPassThrough"
			#tag EndEnumValues
		#tag EndViewProperty
		#tag ViewProperty
			Name="RetainCount"
			Group="Behavior"
			Type="UInteger"
		#tag EndViewProperty
		#tag ViewProperty
			Name="ReverbBlend"
			Group="Behavior"
			Type="Single"
		#tag EndViewProperty
		#tag ViewProperty
			Name="SampleRate"
			Group="Behavior"
			InitialValue="44100.0"
			Type="Double"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Super"
			Visible=true
			Group="ID"
			Type="String"
		#tag EndViewProperty
		#tag ViewProperty
			Name="Top"
			Visible=true
			Group="Position"
			InitialValue="0"
			Type="Integer"
		#tag EndViewProperty
	#tag EndViewBehavior
End Class
#tag EndClass
